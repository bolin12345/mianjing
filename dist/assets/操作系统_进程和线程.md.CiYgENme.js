import{_ as a,c as e,o as l,a1 as i}from"./chunks/framework.OzTm07G-.js";const m=JSON.parse('{"title":"进程、线程的关系与 区别，是否了解协程，和前两者区别","description":"","frontmatter":{},"headers":[],"relativePath":"操作系统/进程和线程.md","filePath":"操作系统/进程和线程.md"}'),t={name:"操作系统/进程和线程.md"},r=i('<h1 id="进程、线程的关系与-区别-是否了解协程-和前两者区别" tabindex="-1">进程、线程的关系与 区别，是否了解协程，和前两者区别 <a class="header-anchor" href="#进程、线程的关系与-区别-是否了解协程-和前两者区别" aria-label="Permalink to &quot;进程、线程的关系与 区别，是否了解协程，和前两者区别&quot;">​</a></h1><h2 id="进程" tabindex="-1">进程： <a class="header-anchor" href="#进程" aria-label="Permalink to &quot;进程：&quot;">​</a></h2><p>系统进行资源分配和调度的基本单位，每个进程拥有独立的内存空间</p><ul><li>特点 <ul><li>每个进程有自己的独立空间</li><li>进程之间的通信需要通过进程间通信（IPC）机制, 如管道、消息队列、共享内存等</li><li>创建和销毁进程的开销较大</li><li>进程之间的切换需要操作系统内核支持</li></ul></li></ul><h2 id="线程" tabindex="-1">线程： <a class="header-anchor" href="#线程" aria-label="Permalink to &quot;线程：&quot;">​</a></h2><p>是进程中的一个执行单元，是操作系统进行调度的最小单位，同一个进程中的多个线程共享该进程的内存空间</p><ul><li>特点 <ul><li>同一进程中的线程共享内存空间，因此线程间的通信比进程间通信更高效</li><li>创建和销毁线程开销比进程小</li><li>线程之间的切换也比进程切换快</li><li>线程的调度由操作系统内核管理</li></ul></li></ul><h2 id="操作系统死锁的必要条件" tabindex="-1">操作系统死锁的必要条件 <a class="header-anchor" href="#操作系统死锁的必要条件" aria-label="Permalink to &quot;操作系统死锁的必要条件&quot;">​</a></h2><p>(1) 互斥条件： 一个资源只允许一个进程使用 (2) 请求与保持条件： 一个进程因请求资源而阻塞，对已获得的资源保持不放 (3) 不剥夺条件： 进程已获得的资源，未使用完成前不能强行剥夺 (4) 循环等待条件： 若干进程之间形成一种头尾相接的循环等待资源关系</p>',9),o=[r];function _(n,s,c,h,d,u){return l(),e("div",null,o)}const f=a(t,[["render",_]]);export{m as __pageData,f as default};
